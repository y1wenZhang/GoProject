package hot100

/*
给定一个整数数组 nums，将数组中的元素向右轮转 k 个位置，其中 k 是非负数。


示例 1:

输入: nums = [1,2,3,4,5,6,7], k = 3
输出: [5,6,7,1,2,3,4]
解释:
向右轮转 1 步: [7,1,2,3,4,5,6]
向右轮转 2 步: [6,7,1,2,3,4,5]
向右轮转 3 步: [5,6,7,1,2,3,4]
示例 2:

输入：nums = [-1,-100,3,99], k = 2
输出：[3,99,-1,-100]
解释:
向右轮转 1 步: [99,-1,-100,3]
向右轮转 2 步: [3,99,-1,-100]

*/

/*
分析：
翻转数组： list = [1,2,3,4,5,6,7], k=3

0. 原始数组 [1,2,3,4,5,6,7]
1. 翻转整个数组[7,6,5,4,3,2,1]
2. 翻转前[0:k%n]位数组[5,6,7,4,3,2,1]
3. 翻转后[k%n:n]位数组[5,6,7,1,2,3,4]
*/

func rotate(nums []int, k int) {
	n := len(nums)
	// 1.
	reverse(nums)
	// 2.
	reverse(nums[:k%n])
	// 3.
	reverse(nums[k%n:])
}

func reverse(nums []int) {
	n := len(nums)
	mid := n / 2

	for i := 0; i < mid; i++ {
		nums[i], nums[n-1-i] = nums[n-1-i], nums[i]
	}
}
